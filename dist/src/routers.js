"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.router = void 0;
const express_1 = require("express");
const createClientControllers_1 = require("./controllers/client/createClientControllers");
const getClientByNameControllers_1 = require("./controllers/client/getClientByNameControllers");
const getCustomersControllers_1 = require("./controllers/client/getCustomersControllers");
const updateClientControllers_1 = require("./controllers/client/updateClientControllers");
const createOsControllers_1 = require("./controllers/os/createOsControllers");
const getAllOsByClientControllers_1 = require("./controllers/os/getAllOsByClientControllers");
const getAllOsControllers_1 = require("./controllers/os/getAllOsControllers");
const getOsByIdControllers_1 = require("./controllers/os/getOsByIdControllers");
const updateOsControlles_1 = require("./controllers/os/updateOsControlles");
const authUserControllers_1 = require("./controllers/user/authUserControllers");
const createUserControllers_1 = require("./controllers/user/createUserControllers");
const detailUserControllers_1 = require("./controllers/user/detailUserControllers");
const isAuthenticated_1 = require("./middlewares/isAuthenticated");
const router = (0, express_1.Router)();
exports.router = router;
router.post("/users", isAuthenticated_1.isAuthenticated, new createUserControllers_1.CreateUserController().handle);
router.post("/session", new authUserControllers_1.authUserControllers().handle);
router.get("/me", isAuthenticated_1.isAuthenticated, new detailUserControllers_1.detailUserController().handle);
router.post("/client", isAuthenticated_1.isAuthenticated, new createClientControllers_1.CreateClientController().handle);
router.get("/client/:name", isAuthenticated_1.isAuthenticated, new getClientByNameControllers_1.GetClientByNameControllers().handle);
router.get("/os", isAuthenticated_1.isAuthenticated, new getAllOsControllers_1.GetAllOsController().handle);
router.get("/os/:id", isAuthenticated_1.isAuthenticated, new getOsByIdControllers_1.GetOsByIdController().handle);
router.get("/os/client/:clientId", isAuthenticated_1.isAuthenticated, new getAllOsByClientControllers_1.GetAllOsByController().handle);
router.put("/client/:id", isAuthenticated_1.isAuthenticated, new updateClientControllers_1.UpdateClientController().handle);
router.put("/os/:id", isAuthenticated_1.isAuthenticated, new updateOsControlles_1.UpdateOsControllers().handle);
router.get("/customers", isAuthenticated_1.isAuthenticated, new getCustomersControllers_1.GetCustomersControllers().handle);
router.post("/os", isAuthenticated_1.isAuthenticated, new createOsControllers_1.CreateOsControllers().handle);
